/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: color_config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export enum Distribution {
    DISTRIBUTION_UNSPECIFIED = 0,
    DISTRIBUTION_EQUAL = 1,
    DISTRIBUTION_NEAR = 2
}
export class Color extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        index?: number;
        hue?: number;
        saturation?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("index" in data && data.index != undefined) {
                this.index = data.index;
            }
            if ("hue" in data && data.hue != undefined) {
                this.hue = data.hue;
            }
            if ("saturation" in data && data.saturation != undefined) {
                this.saturation = data.saturation;
            }
        }
    }
    get index() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set index(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get hue() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set hue(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get saturation() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set saturation(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        index?: number;
        hue?: number;
        saturation?: number;
    }): Color {
        const message = new Color({});
        if (data.index != null) {
            message.index = data.index;
        }
        if (data.hue != null) {
            message.hue = data.hue;
        }
        if (data.saturation != null) {
            message.saturation = data.saturation;
        }
        return message;
    }
    toObject() {
        const data: {
            index?: number;
            hue?: number;
            saturation?: number;
        } = {};
        if (this.index != null) {
            data.index = this.index;
        }
        if (this.hue != null) {
            data.hue = this.hue;
        }
        if (this.saturation != null) {
            data.saturation = this.saturation;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.index != 0)
            writer.writeInt32(1, this.index);
        if (this.hue != 0)
            writer.writeFloat(2, this.hue);
        if (this.saturation != 0)
            writer.writeFloat(3, this.saturation);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Color {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Color();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.index = reader.readInt32();
                    break;
                case 2:
                    message.hue = reader.readFloat();
                    break;
                case 3:
                    message.saturation = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): Color {
        return Color.deserialize(bytes);
    }
}
export class ColorConfig extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        hue_count?: number;
        proximity?: number;
        hue_offset?: number;
        saturation?: number;
        scale_min?: number;
        scale_max?: number;
        scale_step?: number;
        distribution?: Distribution;
        colors?: Color[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("hue_count" in data && data.hue_count != undefined) {
                this.hue_count = data.hue_count;
            }
            if ("proximity" in data && data.proximity != undefined) {
                this.proximity = data.proximity;
            }
            if ("hue_offset" in data && data.hue_offset != undefined) {
                this.hue_offset = data.hue_offset;
            }
            if ("saturation" in data && data.saturation != undefined) {
                this.saturation = data.saturation;
            }
            if ("scale_min" in data && data.scale_min != undefined) {
                this.scale_min = data.scale_min;
            }
            if ("scale_max" in data && data.scale_max != undefined) {
                this.scale_max = data.scale_max;
            }
            if ("scale_step" in data && data.scale_step != undefined) {
                this.scale_step = data.scale_step;
            }
            if ("distribution" in data && data.distribution != undefined) {
                this.distribution = data.distribution;
            }
            if ("colors" in data && data.colors != undefined) {
                this.colors = data.colors;
            }
        }
    }
    get hue_count() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set hue_count(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get proximity() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set proximity(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get hue_offset() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set hue_offset(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get saturation() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set saturation(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get scale_min() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set scale_min(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get scale_max() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set scale_max(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get scale_step() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set scale_step(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get distribution() {
        return pb_1.Message.getFieldWithDefault(this, 9, Distribution.DISTRIBUTION_UNSPECIFIED) as Distribution;
    }
    set distribution(value: Distribution) {
        pb_1.Message.setField(this, 9, value);
    }
    get colors() {
        return pb_1.Message.getRepeatedWrapperField(this, Color, 10) as Color[];
    }
    set colors(value: Color[]) {
        pb_1.Message.setRepeatedWrapperField(this, 10, value);
    }
    static fromObject(data: {
        hue_count?: number;
        proximity?: number;
        hue_offset?: number;
        saturation?: number;
        scale_min?: number;
        scale_max?: number;
        scale_step?: number;
        distribution?: Distribution;
        colors?: ReturnType<typeof Color.prototype.toObject>[];
    }): ColorConfig {
        const message = new ColorConfig({});
        if (data.hue_count != null) {
            message.hue_count = data.hue_count;
        }
        if (data.proximity != null) {
            message.proximity = data.proximity;
        }
        if (data.hue_offset != null) {
            message.hue_offset = data.hue_offset;
        }
        if (data.saturation != null) {
            message.saturation = data.saturation;
        }
        if (data.scale_min != null) {
            message.scale_min = data.scale_min;
        }
        if (data.scale_max != null) {
            message.scale_max = data.scale_max;
        }
        if (data.scale_step != null) {
            message.scale_step = data.scale_step;
        }
        if (data.distribution != null) {
            message.distribution = data.distribution;
        }
        if (data.colors != null) {
            message.colors = data.colors.map(item => Color.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            hue_count?: number;
            proximity?: number;
            hue_offset?: number;
            saturation?: number;
            scale_min?: number;
            scale_max?: number;
            scale_step?: number;
            distribution?: Distribution;
            colors?: ReturnType<typeof Color.prototype.toObject>[];
        } = {};
        if (this.hue_count != null) {
            data.hue_count = this.hue_count;
        }
        if (this.proximity != null) {
            data.proximity = this.proximity;
        }
        if (this.hue_offset != null) {
            data.hue_offset = this.hue_offset;
        }
        if (this.saturation != null) {
            data.saturation = this.saturation;
        }
        if (this.scale_min != null) {
            data.scale_min = this.scale_min;
        }
        if (this.scale_max != null) {
            data.scale_max = this.scale_max;
        }
        if (this.scale_step != null) {
            data.scale_step = this.scale_step;
        }
        if (this.distribution != null) {
            data.distribution = this.distribution;
        }
        if (this.colors != null) {
            data.colors = this.colors.map((item: Color) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hue_count != 0)
            writer.writeInt32(1, this.hue_count);
        if (this.proximity != 0)
            writer.writeInt32(2, this.proximity);
        if (this.hue_offset != 0)
            writer.writeFloat(3, this.hue_offset);
        if (this.saturation != 0)
            writer.writeFloat(4, this.saturation);
        if (this.scale_min != 0)
            writer.writeInt32(5, this.scale_min);
        if (this.scale_max != 0)
            writer.writeInt32(6, this.scale_max);
        if (this.scale_step != 0)
            writer.writeInt32(7, this.scale_step);
        if (this.distribution != Distribution.DISTRIBUTION_UNSPECIFIED)
            writer.writeEnum(9, this.distribution);
        if (this.colors.length)
            writer.writeRepeatedMessage(10, this.colors, (item: Color) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ColorConfig {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ColorConfig();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.hue_count = reader.readInt32();
                    break;
                case 2:
                    message.proximity = reader.readInt32();
                    break;
                case 3:
                    message.hue_offset = reader.readFloat();
                    break;
                case 4:
                    message.saturation = reader.readFloat();
                    break;
                case 5:
                    message.scale_min = reader.readInt32();
                    break;
                case 6:
                    message.scale_max = reader.readInt32();
                    break;
                case 7:
                    message.scale_step = reader.readInt32();
                    break;
                case 9:
                    message.distribution = reader.readEnum();
                    break;
                case 10:
                    reader.readMessage(message.colors, () => pb_1.Message.addToRepeatedWrapperField(message, 10, Color.deserialize(reader), Color));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): ColorConfig {
        return ColorConfig.deserialize(bytes);
    }
}
